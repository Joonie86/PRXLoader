PL_VER = 4_30DEX

CC		:= ppu-gcc
CXX		:= ppu-g++
LD		:= ppu-ld 
OBJCOPY		:= ppu-objcopy
OBJDUMP		:= ppu-objdump
AR 		:= ppu-ar
STRIP		:= ppu-strip
INCLUDE		= $(PS3DEV)/ppu/ppu/include lv2/include
LIBSDIR         =
LIBS           	=
BUILD_TYPE     	= 
GCC_INCLUDE_DIR = lv2/include

CFLAGS = -ffunction-sections -fdata-sections -Os -m64 -fno-builtin -fno-exceptions \
			   -Os -Wall -Wno-strict-aliasing -Wno-multichar $(foreach dir,$(INCLUDE),-I$(dir)) \
			   -DLV2 -DFIRMWARE_$(PL_VER) -ffreestanding 
CFLAGS += --std=gnu99

ifeq ($(BUILD_TYPE), debug)
CFLAGS += -DDEBUG -DTEST
endif

ifeq ($(BUILD_TYPE), test)
CFLAGS += -DTEST
endif

#CFLAGS += -DPSN_SUPPORT
#CFLAGS += -DPEEK_POKE_TEST 

#LDFLAGS= -T payload.ld -nostartfiles -nostdlib -nodefaultlibs -Wl,-static -Wl,-s -L. $(foreach dir,$(LIBSDIR),-L$(dir)) $(LIBS) \
#	-Wl,--gc-sections -Wl,-Map=payload.map
LDFLAGS= -T payload.ld -nostartfiles -nostdlib -nodefaultlibs -Wl,-static -L. $(foreach dir,$(LIBSDIR),-L$(dir)) $(LIBS) \
	 -Wl,--gc-sections -Wl,-Map=payload.map

OBJS = payload_src/start.o payload_src/main.o \
	lv2/src/memory.o lv2/src/thread.o lv2/src/thread_c.o lv2/src/process.o \
	lv2/src/modules.o lv2/src/modules_c.o lv2/src/syscall.o lv2/src/libc.o

ifeq ($(BUILD_TYPE), debug)
#OBJS += lv2/src/debug.o
endif

all: payload_$(PL_VER).bin

objdump: payload$(PL_VER).bin
	$(OBJDUMP) -D -EB -b binary -m powerpc:common64 payload_$(PL_VER).bin

%.bin: %.elf
	$(OBJCOPY) -O binary $< $@

payload_$(PL_VER).elf: $(OBJS) payload.ld
	$(CC) $(LDFLAGS) -o $@ $(OBJS)

%.o: %.S
	$(CC) $(CFLAGS) -c -o $@ $<

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

clean:
	rm -f *.o *.elf *.map *.lzma payload_src/*.o lv2/src/*.o
